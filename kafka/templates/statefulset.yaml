{{- $replicaCount := int .Values.controller.replicaCount }}
{{- if and .Values.kraft.enabled (or (gt $replicaCount 0) .Values.controller.autoscaling.enabled) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ printf "%s-controller" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    app.kubernetes.io/component: controller-eligible
    app.kubernetes.io/part-of: kafka
spec:
  podManagementPolicy: {{ .Values.controller.podManagementPolicy }}
  {{- if not .Values.controller.autoscaling.enabled }}
  replicas: {{ .Values.controller.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/component: controller-eligible
      app.kubernetes.io/part-of: kafka
  serviceName: {{ printf "%s-controller-headless" (include "common.names.fullname" .) | trunc 63 | trimSuffix "-" }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller-eligible
        app.kubernetes.io/part-of: kafka
    spec:
      {{- if .Values.controller.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.controller.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.controller.podAffinityPreset "component" "controller-eligible" "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.controller.podAntiAffinityPreset "component" "controller-eligible" "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.controller.nodeAffinityPreset.type "key" .Values.controller.nodeAffinityPreset.key "values" .Values.controller.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      initContainers:
        - name: kafka-init
          image: {{ .Values.image.registry }}/{{ .Values.image.initRepository }}:{{ .Values.image.initTag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
          args:
            - -ec
            - |
              /script/kafka-init.sh
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: KAFKA_CFG_NUM_PARTITIONS
              value: {{ .Values.controller.kafkaCfgNumPartions | quote }}
            - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
              value: {{ .Values.controller.kafkaCfgDeafultReplicationFactor |quote   }}
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: {{ .Values.controller.kafkaCfgOffsetsTopicReplicationFactor | quote }}
            - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
              value: {{ .Values.controller.kafkaGroupInitialRebalanceDelayMs | quote  }}
            - name: KAFKA_CFG_LOG_RETENTION_HOURS
              value: {{ .Values.controller.kafkaCfgLogRetentionHours | quote }}
            - name: KAFKA_HEAP_OPTS
              value: {{ coalesce .Values.controller.heapOpts .Values.heapOpts | quote }}
            - name: KAFKA_CFG_MESSAGE_MAX_BYTES
              value: {{  .Values.controller.kafkaCfgMessageMaxBytes  | quote }}
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
              value: {{ .Values.controller.kafkaCfgTransactionStateLogReplicationFactor | quote  }}
            - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
              value: {{ .Values.controller.kafkaCfgTransactionStateLogMinIsr | quote }}
            - name: KAFKA_CFG_CONTROLLER_LISTENER_NAMES
              value: {{ .Values.controller.KafkaCfgControllerListenerNames  }}
            - name: KAFKA_CFG_PROCESS_ROLES
              value: {{ .Values.controller.kafkaCfgProcessRoles | quote }}
            - name: KAFKA_CFG_LISTENERS
              value: {{ include "kafka.listeners" . | quote }}
            - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
              value: {{ include "kafka.securityProtocolMap" . | quote }}
            - name: KAFKA_CFG_CONTROLLER_QUORUM_VOTERS
              value: {{ include "kafka.quorum.voters" . | quote }}
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: {{ .Values.controller.kafkaKraftClusterId | quote }}
          volumeMounts:
            - name: conf
              mountPath: /serverconf
            - name: kafka-config
              mountPath: /conf
            - name: script
              mountPath: /script
      containers:
        - name: kafka
          image: {{ include "kafka.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.controller.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.controller.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: KAFKA_KRAFT_CLUSTER_ID
              value: {{ .Values.controller.kafkaKraftClusterId | quote }}
          ports:
            - name: controller
              containerPort: {{ .Values.listeners.controller.containerPort }}
            {{- if not .Values.controller.controllerOnly }}
            - name: client
              containerPort: {{ .Values.listeners.client.containerPort }}
            - name: interbroker
              containerPort: {{ .Values.listeners.interbroker.containerPort }}
            {{- if .Values.externalAccess.enabled }}
            - name: external
              containerPort: {{ .Values.listeners.external.containerPort }}
            {{- end }}
            {{- if .Values.listeners.extraListeners }}
            {{- include "kafka.extraListeners.containerPorts" . | nindent 12 }}
            {{- end }}
            {{- end }}
            {{- if .Values.controller.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.controller.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.controller.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.controller.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.controller.livenessProbe.enabled }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.controller.livenessProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command:
                - pgrep
                - -f
                - kafka
          {{- end }}
          {{- if .Values.controller.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.controller.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.controller.readinessProbe.enabled }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.controller.readinessProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: "controller"
          {{- end }}
          {{- if .Values.controller.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.controller.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.controller.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.controller.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: "controller"
          {{- end }}
          {{- end }}
          {{- if .Values.controller.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.controller.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.controller.resources }}
          resources: {{- toYaml .Values.controller.resources | nindent 12 }}
          {{- else if ne .Values.controller.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.controller.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: {{ .Values.controller.persistence.mountPath }}
            - name: kafka-config
              mountPath: /opt/bitnami/kafka/config/server.properties
              subPath: server.properties
      volumes:
        - name: conf
          configMap:
            name: {{ printf "%s-conf" (include "common.names.fullname" .) }}
        - name: script
          configMap:
            name: {{ include "common.names.fullname" . }}-scripts
            defaultMode: 0777
        - name: kafka-config
          emptyDir: {}
        {{- if not .Values.controller.persistence.enabled }}
        - name: data
          emptyDir: {}
        {{- else if .Values.controller.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ printf "%s" (tpl .Values.controller.persistence.existingClaim .) }}
        {{- end }}
  {{- if or (and .Values.controller.persistence.enabled (not .Values.controller.persistence.existingClaim)) (and .Values.controller.logPersistence.enabled (not .Values.controller.logPersistence.existingClaim)) }}
  volumeClaimTemplates:
    {{- if and .Values.controller.persistence.enabled (not .Values.controller.persistence.existingClaim) }}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: data
        {{- if .Values.controller.persistence.annotations }}
        annotations: {{- include "common.tplvalues.render" (dict "value" .Values.controller.persistence.annotations "context" $) | nindent 10 }}
        {{- end }}
        {{- if .Values.controller.persistence.labels }}
        labels: {{- include "common.tplvalues.render" (dict "value" .Values.controller.persistence.labels "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.controller.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.controller.persistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.controller.persistence "global" .Values.global) | nindent 8 }}
        {{- if .Values.controller.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.controller.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
    {{- end }}
    {{- if and .Values.controller.logPersistence.enabled (not .Values.controller.logPersistence.existingClaim) }}
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: logs
        {{- if .Values.controller.logPersistence.annotations }}
        annotations: {{- include "common.tplvalues.render" (dict "value" .Values.controller.logPersistence.annotations "context" $) | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.controller.logPersistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.controller.logPersistence.size | quote }}
        {{- include "common.storage.class" (dict "persistence" .Values.controller.logPersistence "global" .Values.global) | nindent 8 }}
        {{- if .Values.controller.logPersistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.controller.logPersistence.selector "context" $) | nindent 10 }}
        {{- end -}}
    {{- end }}
  {{- end }}
{{- end }}
